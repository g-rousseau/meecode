%% Draw function: 3D Quadrotor
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Gauthier ROUSSEAU
% Parrot Drones - CentraleSupelec
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function quadrotor_handle = draw(attitude, position, scale, color)
% DRAWQUADROTOR draws a quadrotor with a given attitude and position
%

arm_x = 1 * scale;
arm_y = 1 * scale;
arm_z = 0.1 * scale;
body_width = 0.3 * scale;
body_length = 1 * scale;
arm_radius = 0.025 * scale;
rotor_radius = 0.65 * scale;

hold on;

% body
faces_cnt = 15;
is_closed = true;
mesh_alpha = 0;
edges_alpha = 0.2;
faces_alpha = 1;
quadrotor_handle(1:3) = draw.cylinder(position + attitude * [-body_length/2; 0; 0],...
                                      position,...
                                      body_width,...
                                      body_width,...
                                      faces_cnt,...
                                      color,...
                                      is_closed,...
                                      mesh_alpha,...
                                      edges_alpha,...
                                      faces_alpha);
% head
faces_cnt = 6;
edges_alpha = 0;

[y_head, z_head, x_head] = cylinder([body_width 0], faces_cnt);
head_inf = [x_head(1,:); y_head(1,:); z_head(1,:)];
head_sup = [x_head(1,:)+body_length/2; y_head(2,:); z_head(2,:)];
head_inf_rotated = attitude * head_inf;
head_sup_rotated = attitude * head_sup;

quadrotor_handle(4) = surf(position(1) + [head_inf_rotated(1,:); head_sup_rotated(1,:)],...
                           position(2) + [head_inf_rotated(2,:); head_sup_rotated(2,:)],...
                           position(3) + [head_inf_rotated(3,:); head_sup_rotated(3,:)],...
                           'FaceColor', color,...
                           'EdgeAlpha', edges_alpha);

% arms
faces_cnt = 4;
arm_color = [0 0 0];
is_closed = false;
mesh_alpha = 0;
edges_alpha = 0;
faces_alpha = 1;
quadrotor_handle(5) = draw.cylinder(position + attitude * [-arm_x; -arm_y; arm_z],...
                                    position + attitude * [arm_x; arm_y; arm_z],...
                                    arm_radius,...
                                    arm_radius,...
                                    faces_cnt,...
                                    arm_color,...
                                    is_closed,...
                                    mesh_alpha,...
                                    edges_alpha,...
                                    faces_alpha);
quadrotor_handle(6) = draw.cylinder(position + attitude * [arm_x; -arm_y; arm_z],...
                                    position + attitude * [-arm_x; arm_y; arm_z],...
                                    arm_radius,...
                                    arm_radius,...
                                    faces_cnt,...
                                    arm_color,...
                                    is_closed,...
                                    mesh_alpha,...
                                    edges_alpha,...
                                    faces_alpha);

% rotors
rotor_color = [0.7 0.7 0.7];
edges_alpha = 0;
edge_cnt = 20;
angle = 0:(2*pi/(edge_cnt-1)):(2*pi);
disc = position + attitude * [arm_x + rotor_radius * cos(angle);
                              -arm_y + rotor_radius * sin(angle);
                              zeros(1,edge_cnt)];
quadrotor_handle(7) = fill3(disc(1,:), disc(2,:), disc(3,:), rotor_color, 'EdgeAlpha', edges_alpha);
disc = position + attitude * [arm_x + rotor_radius * cos(angle);
                              arm_y + rotor_radius * sin(angle);
                              zeros(1,edge_cnt)];
quadrotor_handle(8) = fill3(disc(1,:), disc(2,:), disc(3,:), rotor_color, 'EdgeAlpha', edges_alpha);
disc = position + attitude * [-arm_x + rotor_radius * cos(angle);
                              arm_y + rotor_radius * sin(angle);
                              zeros(1,edge_cnt)];
quadrotor_handle(9) = fill3(disc(1,:), disc(2,:), disc(3,:), rotor_color, 'EdgeAlpha', edges_alpha);
disc = position + attitude * [-arm_x + rotor_radius * cos(angle);
                              -arm_y + rotor_radius * sin(angle);
                              zeros(1,edge_cnt)];
quadrotor_handle(10) = fill3(disc(1,:), disc(2,:), disc(3,:), rotor_color, 'EdgeAlpha', edges_alpha);
end